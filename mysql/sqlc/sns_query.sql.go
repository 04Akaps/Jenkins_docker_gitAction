// Code generated by sqlc. DO NOT EDIT.
// source: sns_query.sql

package sns_mysql

import (
	"context"
	"database/sql"
)

const createNewSnsPost = `-- name: CreateNewSnsPost :execresult
INSERT INTO post (
    post_owner_account,
    title,
    image_url,
    text
) VALUES (
   ?, ?, ?, ?
)
`

type CreateNewSnsPostParams struct {
	PostOwnerAccount string `json:"post_owner_account"`
	Title            string `json:"title"`
	ImageUrl         string `json:"image_url"`
	Text             string `json:"text"`
}

func (q *Queries) CreateNewSnsPost(ctx context.Context, arg CreateNewSnsPostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createNewSnsPost,
		arg.PostOwnerAccount,
		arg.Title,
		arg.ImageUrl,
		arg.Text,
	)
}

const deleteSnsPostByPostId = `-- name: DeleteSnsPostByPostId :execresult
DELETE FROM post 
WHERE post_id = ? LIMIT 1
`

func (q *Queries) DeleteSnsPostByPostId(ctx context.Context, postID int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteSnsPostByPostId, postID)
}

const getPostId = `-- name: GetPostId :one
SELECT post_id FROM post
WHERE post_id = ?
`

func (q *Queries) GetPostId(ctx context.Context, postID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostId, postID)
	var post_id int64
	err := row.Scan(&post_id)
	return post_id, err
}

const getSnsPost = `-- name: GetSnsPost :one
SELECT post_id, post_owner_account, title, image_url, text, like_point, created_at FROM post
WHERE post_id = ? LIMIT 1
`

func (q *Queries) GetSnsPost(ctx context.Context, postID int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getSnsPost, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.PostOwnerAccount,
		&i.Title,
		&i.ImageUrl,
		&i.Text,
		&i.LikePoint,
		&i.CreatedAt,
	)
	return i, err
}

const getSnsPostAll = `-- name: GetSnsPostAll :many
SELECT post_id, post_owner_account, title, image_url, text, like_point, created_at FROM post
WHERE post_owner_account = ?
`

func (q *Queries) GetSnsPostAll(ctx context.Context, postOwnerAccount string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getSnsPostAll, postOwnerAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.PostOwnerAccount,
			&i.Title,
			&i.ImageUrl,
			&i.Text,
			&i.LikePoint,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
